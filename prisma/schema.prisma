generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String        @id @unique @default(uuid())
  nip       String?       @unique
  name      String
  gender    Gender        @default(FEMALE)
  mobile    String        @unique
  address   String
  status    TeacherStatus @default(TETAP)
  username  String        @unique
  password  String
  isDeleted Boolean       @default(false) @map("is_deleted")
  deletedAt DateTime?     @map("deleted_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  classes   Class[]

  @@map("teachers")
}

enum Gender {
  MALE
  FEMALE
}

enum TeacherStatus {
  TETAP
  HONORER
}

model Student {
  id               String    @id @unique @default(uuid())
  nis              String    @unique
  name             String
  gender           Gender    @default(MALE)
  birthPlace       String?   @map("birth_place")
  birthDate        DateTime? @map("birth_date")
  religion         Religion  @map("religion")
  address          String?
  fatherName       String?   @map("father_name")
  motherName       String?   @map("mother_name")
  fatherOccupation String?   @map("father_occupation")
  motherOccupation String?   @map("mother_occupation")
  childOrder       Int?      @map("child_order")
  status           String?   @map("status")
  academicYear     String    @map("academic_year")
  admittedAt       DateTime? @map("admitted_at")
  class            Class     @relation(fields: [classId], references: [id])
  classId          String
  isDeleted        Boolean   @default(false) @map("is_deleted")
  deletedAt        DateTime? @map("deleted_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  developmentAssessments DevelopmentAssessment[]
  physicalDevelopments   PhysicalDevelopment?
  teacherNotes           TeacherNote[]

  @@map("students")
}

enum Religion {
  ISLAM
  KATOLIK
  PROTESTAN
  HINDU
  BUDHA
  KONGHUCU
  LAINNYA
}

model Class {
  id        String    @id @unique @default(uuid())
  name      String
  ageGroup  AgeGroup  @default(GROUP_A) @map("age_group")
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId String
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  students Student[]

  @@map("classes")
}

enum AgeGroup {
  GROUP_A // Kelompok A (4-5 tahun)
  GROUP_B // Kelompok B (5-6 tahun)
  TODDLER // Kelompok Bermain (2-4 tahun)
}

model DevelopmentAspect {
  id          String    @id @unique @default(uuid())
  name        String
  code        String    @unique
  description String?
  order       Int       @default(1)
  isDeleted   Boolean   @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  indicators DevelopmentIndicator[]

  @@map("development_aspects")
}

model DevelopmentIndicator {
  id        String            @id @unique @default(uuid())
  aspect    DevelopmentAspect @relation(fields: [aspectId], references: [id])
  aspectId  String
  name      String
  shortName String?           @map("short_name")
  order     Int               @default(1)
  ageGroup  AgeGroup?         @map("age_group")
  isDeleted Boolean           @default(false) @map("is_deleted")
  deletedAt DateTime?         @map("deleted_at")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @updatedAt @map("updated_at")

  assessments DevelopmentAssessment[]

  @@map("development_indicators")
}

model DevelopmentAssessment {
  id             String               @id @unique @default(uuid())
  student        Student              @relation(fields: [studentId], references: [id])
  studentId      String
  indicator      DevelopmentIndicator @relation(fields: [indicatorId], references: [id])
  indicatorId    String
  development    DevelopmentLevel     @default(BAIK)
  notes          String?
  assessmentDate DateTime?            @map("assessment_date")
  isDeleted      Boolean              @default(false) @map("is_deleted")
  deletedAt      DateTime?            @map("deleted_at")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @default(now()) @updatedAt @map("updated_at")

  @@unique([studentId, indicatorId])
  @@map("development_assessments")
}

enum DevelopmentLevel {
  BAIK
  CUKUP
  PERLU_DILATIH
}

model PhysicalDevelopment {
  id                String    @id @unique @default(uuid())
  student           Student   @relation(fields: [studentId], references: [id])
  studentId         String
  height            Float?
  weight            Float?
  headCircumference Float?    @map("head_circumference")
  measurementDate   DateTime? @map("measurement_date")
  isDeleted         Boolean   @default(false) @map("is_deleted")
  deletedAt         DateTime? @map("deleted_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")

  @@unique([studentId])
  @@map("physical_developments")
}

model TeacherNote {
  id        String  @id @unique @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  noteType PAUDNoteType @default(OBSERVATION) @map("note_type")
  title    String?
  content  String

  semester     Int       @default(1)
  academicYear String    @map("academic_year")
  noteDate     DateTime? @map("note_date")
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("teacher_notes")
}

enum PAUDNoteType {
  OBSERVATION
  ACHIEVEMENT
  BEHAVIOR
  SOCIAL
  EMOTIONAL
  RECOMMENDATION
  HEALTH
}
